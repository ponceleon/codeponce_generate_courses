name: Deploy with Auto-Generated Documentation

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Job para generar y validar documentaci√≥n
  generate-docs:
    runs-on: ubuntu-latest
    name: Generate Documentation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate documentation
      env:
        NODE_ENV: production
        BASE_URL: ${{ secrets.PRODUCTION_URL || 'https://your-api.com' }}
      run: npm run docs:build
      
    - name: Validate documentation
      run: |
        echo "üîç Validating generated documentation..."
        test -f docs/api-spec.json && echo "‚úÖ OpenAPI spec generated"
        test -f docs/README.md && echo "‚úÖ Markdown docs generated"
        test -f docs/index.html && echo "‚úÖ HTML docs generated"
        test -f docs/deployment-info.json && echo "‚úÖ Deployment info generated"
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: docs/
        retention-days: 30
        
    # Opcional: Comentar en PR con link a documentaci√≥n
    - name: Comment PR with documentation
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const artifactUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üìö **Documentaci√≥n generada autom√°ticamente**
            
            La documentaci√≥n de la API ha sido generada y est√° disponible en los artefactos de este build.
            
            üîó **Enlaces √∫tiles:**
            - [Ver artefactos de documentaci√≥n](${artifactUrl})
            - [Especificaci√≥n OpenAPI generada](${artifactUrl}/api-spec.json)
            
            ‚ú® Esta documentaci√≥n se desplegar√° autom√°ticamente cuando se haga merge a la rama principal.`
          });

  # Job para deployment (solo en push a main/production)
  deploy:
    runs-on: ubuntu-latest
    needs: generate-docs
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production')
    name: Deploy to Production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run pre-deploy scripts
      env:
        NODE_ENV: production
        BASE_URL: ${{ secrets.PRODUCTION_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        API_TOKEN: ${{ secrets.API_TOKEN }}
      run: npm run predeploy
      
    - name: Deploy application
      env:
        NODE_ENV: production
        BASE_URL: ${{ secrets.PRODUCTION_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        API_TOKEN: ${{ secrets.API_TOKEN }}
      run: |
        echo "üöÄ Deploying application..."
        # Aqu√≠ ir√≠an tus comandos de deployment espec√≠ficos
        # Ejemplos:
        # - pm2 restart app
        # - docker build & deploy
        # - rsync a servidor
        # - deploy a Heroku/Vercel/Railway
        echo "‚úÖ Application deployed successfully"
        
    - name: Deploy documentation to CDN/Static hosting
      env:
        NODE_ENV: production
      run: |
        echo "üìö Deploying documentation..."
        # Opcional: subir documentaci√≥n a CDN o hosting est√°tico
        # aws s3 sync docs/ s3://your-docs-bucket/
        # vercel --prod docs/
        # netlify deploy --prod --dir docs/
        echo "‚úÖ Documentation deployed successfully"
        
    - name: Run post-deploy verification
      env:
        BASE_URL: ${{ secrets.PRODUCTION_URL }}
      run: |
        echo "üîç Verifying deployment..."
        # Verificar que la API est√© funcionando
        curl -f "$BASE_URL/api/health" || exit 1
        echo "‚úÖ Health check passed"
        
        # Verificar que la documentaci√≥n est√© disponible
        curl -f "$BASE_URL/doc.json" || exit 1
        echo "‚úÖ Documentation API working"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üìö Documentation updated and available at: ${{ secrets.PRODUCTION_URL }}/doc"

  # Job opcional para publicar documentaci√≥n en GitHub Pages
  publish-docs:
    runs-on: ubuntu-latest
    needs: generate-docs
    if: github.ref == 'refs/heads/main'
    name: Publish Documentation to GitHub Pages
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-documentation
        path: docs/
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Comment with Pages URL
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `üìö **Documentaci√≥n publicada en GitHub Pages**
            
            üîó **URL:** ${{ steps.deployment.outputs.page_url }}
            
            La documentaci√≥n de la API est√° ahora disponible p√∫blicamente.`
          }); 
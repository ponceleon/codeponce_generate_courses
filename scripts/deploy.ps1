param(
    [Parameter(Mandatory=$false)]
    [string]$Environment = "development"
)

# Script de deployment autom√°tico con generaci√≥n de documentaci√≥n para Windows
# Uso: .\scripts\deploy.ps1 -Environment production

Write-Host "üöÄ Iniciando deployment para ambiente: $Environment" -ForegroundColor Green
$timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
Write-Host "üìÖ Timestamp: $timestamp" -ForegroundColor Cyan

# Funci√≥n para logging con colores
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    
    $color = switch ($Level) {
        "ERROR" { "Red" }
        "WARNING" { "Yellow" }
        "SUCCESS" { "Green" }
        "INFO" { "White" }
        default { "White" }
    }
    
    Write-Host "[$timestamp] $Message" -ForegroundColor $color
}

# Funci√≥n para manejo de errores
function Exit-WithError {
    param([string]$Message)
    Write-Log "‚ùå Error: $Message" "ERROR"
    exit 1
}

try {
    # Validar ambiente
    $validEnvironments = @("development", "staging", "production")
    if ($Environment -notin $validEnvironments) {
        Exit-WithError "Ambiente no v√°lido: $Environment. Use: $($validEnvironments -join ', ')"
    }

    # Configurar variables de entorno seg√∫n el ambiente
    switch ($Environment) {
        "production" {
            $env:NODE_ENV = "production"
            $env:BASE_URL = if ($env:PRODUCTION_URL) { $env:PRODUCTION_URL } else { "https://api.example.com" }
            Write-Log "üåê Configurando para producci√≥n" "INFO"
        }
        "staging" {
            $env:NODE_ENV = "staging" 
            $env:BASE_URL = if ($env:STAGING_URL) { $env:STAGING_URL } else { "https://staging-api.example.com" }
            Write-Log "üé≠ Configurando para staging" "INFO"
        }
        "development" {
            $env:NODE_ENV = "development"
            $env:BASE_URL = if ($env:DEV_URL) { $env:DEV_URL } else { "http://localhost:3000" }
            Write-Log "üõ†Ô∏è Configurando para desarrollo" "INFO"
        }
    }

    # Verificar archivos necesarios
    if (-not (Test-Path "package.json")) {
        Exit-WithError "package.json no encontrado"
    }
    if (-not (Test-Path "index.js")) {
        Exit-WithError "index.js no encontrado"
    }
    Write-Log "‚úÖ Validaci√≥n inicial completada" "SUCCESS"

    # Instalar dependencias
    Write-Log "üì¶ Instalando dependencias..." "INFO"
    npm ci
    if ($LASTEXITCODE -ne 0) {
        Exit-WithError "Fall√≥ la instalaci√≥n de dependencias"
    }

    # Ejecutar tests (si existen)
    $testScript = (Get-Content "package.json" | ConvertFrom-Json).scripts.test
    if ($testScript -and $testScript -ne 'echo "Error: no test specified" && exit 1') {
        Write-Log "üß™ Ejecutando tests..." "INFO"
        npm test
        if ($LASTEXITCODE -ne 0) {
            Exit-WithError "Los tests fallaron"
        }
    } else {
        Write-Log "‚ö†Ô∏è No se encontraron tests definidos" "WARNING"
    }

    # Generar documentaci√≥n autom√°ticamente
    Write-Log "üìö Generando documentaci√≥n autom√°ticamente..." "INFO"
    npm run docs:build
    if ($LASTEXITCODE -ne 0) {
        Exit-WithError "Fall√≥ la generaci√≥n de documentaci√≥n"
    }

    # Verificar que la documentaci√≥n se gener√≥ correctamente
    $docsFiles = @("docs/api-spec.json", "docs/README.md", "docs/index.html", "docs/deployment-info.json")
    $missingFiles = @()
    
    foreach ($file in $docsFiles) {
        if (-not (Test-Path $file)) {
            $missingFiles += $file
        }
    }
    
    if ($missingFiles.Count -gt 0) {
        Exit-WithError "Los siguientes archivos de documentaci√≥n no se generaron: $($missingFiles -join ', ')"
    }
    
    Write-Log "‚úÖ Documentaci√≥n generada exitosamente:" "SUCCESS"
    Write-Log "   - OpenAPI: docs/api-spec.json" "INFO"
    Write-Log "   - Markdown: docs/README.md" "INFO"
    Write-Log "   - HTML: docs/index.html" "INFO"
    Write-Log "   - Deployment info: docs/deployment-info.json" "INFO"

    # Deployment espec√≠fico seg√∫n la plataforma disponible
    Write-Log "üöÄ Ejecutando deployment..." "INFO"

    # Verificar qu√© herramientas est√°n disponibles
    $pm2Available = Get-Command pm2 -ErrorAction SilentlyContinue
    $dockerAvailable = Get-Command docker -ErrorAction SilentlyContinue
    
    if ($pm2Available) {
        Write-Log "üìà Usando PM2 para deployment..." "INFO"
        
        # Detener aplicaci√≥n si est√° corriendo
        pm2 stop api-gemini 2>$null
        
        # Iniciar aplicaci√≥n
        pm2 start index.js --name api-gemini --env $Environment
        if ($LASTEXITCODE -ne 0) {
            Exit-WithError "Fall√≥ el inicio con PM2"
        }
        
        # Guardar configuraci√≥n PM2
        pm2 save
        
    } elseif ($dockerAvailable -and (Test-Path "Dockerfile")) {
        Write-Log "üê≥ Usando Docker para deployment..." "INFO"
        
        # Construir imagen
        docker build -t api-gemini:$Environment .
        if ($LASTEXITCODE -ne 0) {
            Exit-WithError "Fall√≥ la construcci√≥n de Docker"
        }
        
        # Detener y remover container anterior
        docker stop api-gemini-$Environment 2>$null
        docker rm api-gemini-$Environment 2>$null
        
        # Iniciar nuevo container
        docker run -d --name api-gemini-$Environment --env-file .env -p 3000:3000 api-gemini:$Environment
        if ($LASTEXITCODE -ne 0) {
            Exit-WithError "Fall√≥ el inicio del container"
        }
        
    } else {
        Write-Log "üîß Deployment manual..." "WARNING"
        Write-Log "   Para deployment autom√°tico, instale PM2 o Docker" "INFO"
        Write-Log "   Para iniciar manualmente: npm start" "INFO"
    }

    # Esperar a que el servicio est√© listo
    Write-Log "‚è≥ Esperando a que el servicio est√© listo..." "INFO"
    Start-Sleep -Seconds 5

    # Verificaci√≥n post-deployment
    Write-Log "üîç Verificando deployment..." "INFO"

    # Health check
    try {
        $healthResponse = Invoke-RestMethod -Uri "$env:BASE_URL/api/health" -Method Get -TimeoutSec 10
        if ($healthResponse.success) {
            Write-Log "‚úÖ Health check exitoso" "SUCCESS"
        } else {
            Exit-WithError "Health check fall√≥ - Respuesta inv√°lida"
        }
    } catch {
        Exit-WithError "Health check fall√≥ - El servicio no est√° respondiendo: $($_.Exception.Message)"
    }

    # Verificar documentaci√≥n
    try {
        $docsResponse = Invoke-RestMethod -Uri "$env:BASE_URL/doc.json" -Method Get -TimeoutSec 10
        if ($docsResponse) {
            Write-Log "‚úÖ Documentaci√≥n API funcionando" "SUCCESS"
        } else {
            Exit-WithError "La documentaci√≥n API no est√° disponible"
        }
    } catch {
        Exit-WithError "La documentaci√≥n API no est√° disponible: $($_.Exception.Message)"
    }

    # Notificaci√≥n de √©xito (si est√° configurada)
    if ($env:SLACK_WEBHOOK_URL) {
        Write-Log "üì¢ Enviando notificaci√≥n..." "INFO"
        try {
            $payload = @{
                text = "üöÄ Deployment exitoso`n‚Ä¢ Ambiente: $Environment`n‚Ä¢ Timestamp: $timestamp`n‚Ä¢ Documentaci√≥n: $env:BASE_URL/doc"
            } | ConvertTo-Json
            
            Invoke-RestMethod -Uri $env:SLACK_WEBHOOK_URL -Method Post -Body $payload -ContentType "application/json"
            Write-Log "‚úÖ Notificaci√≥n enviada" "SUCCESS"
        } catch {
            Write-Log "‚ö†Ô∏è No se pudo enviar notificaci√≥n: $($_.Exception.Message)" "WARNING"
        }
    }

    # Resumen final
    Write-Host ""
    Write-Log "üéâ ¬°Deployment completado exitosamente!" "SUCCESS"
    Write-Log "üåê API disponible en: $env:BASE_URL" "INFO"
    Write-Log "üìö Documentaci√≥n disponible en:" "INFO"
    Write-Log "   - Swagger UI: $env:BASE_URL/doc" "INFO"
    Write-Log "   - JSON: $env:BASE_URL/doc.json" "INFO"
    Write-Log "   - Markdown: $env:BASE_URL/doc.md" "INFO"
    Write-Log "   - HTML est√°tico: docs/index.html" "INFO"
    Write-Host ""
    Write-Log "üìã Informaci√≥n de deployment guardada en: docs/deployment-info.json" "INFO"
    Write-Log "‚è∞ Deployment completado en: $(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')" "INFO"

} catch {
    Exit-WithError "Error inesperado: $($_.Exception.Message)"
} 